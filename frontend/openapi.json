{
  "openapi": "3.1.0",
  "info": {
    "title": "Savory Stories Backend",
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/auth/register": {
      "post": {
        "tags": ["auth"],
        "summary": "Register an user",
        "description": "Register a user with all the necessary information.\n\n### Args:\n- `session (SessionDep)`: Database session dependency.\n- `user_in (UserCreate)`: User input data required for registration.\n\n### Returns:\n- `UserRead`: The registered user information excluding sensitive data.\n\n### Raises:\n- `HTTPException`: If a user with the provided email already exists.\n\n### Example:\n```python\n{\n    \"email\": \"user@example.com\",\n    \"full_name\": \"John Doe\",\n    \"password\": \"strongpassword\"\n}\n```",
        "operationId": "register_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The Register user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login/access-token": {
      "post": {
        "tags": ["auth"],
        "summary": "Login Access Token",
        "description": "Get an access token for authentication.\n\nThis endpoint authenticates a user's credentials and returns an access token\nif the credentials are valid.\n\n- `session`: SQLAlchemy database session dependency.\n- `form_data`: OAuth2PasswordRequestForm object containing username and password.\n\n## Returns:\n- `Token`: A Token object containing the access token and token type.\n\n## Raises:\n- `HTTPException`: If the provided username or password is incorrect.",
        "operationId": "login_access_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_auth-login_access_token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": ["user"],
        "summary": "Read User",
        "operationId": "read_user",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "patch": {
        "tags": ["user"],
        "summary": "Update User Me",
        "operationId": "update_user_me",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/v1/users/profile-picture": {
      "get": {
        "tags": ["user"],
        "summary": "Get Profile Picture",
        "description": "Serve the profile picture of a user.\n\n### Arguments:\n- `user_id` (int): The ID of the user whose profile picture is requested.\n- `session` (Session): The database session.\n\n### Returns:\n- `FileResponse`: The requested image file.",
        "operationId": "get_profile_picture",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "post": {
        "tags": ["user"],
        "summary": "Upload Profile Picture",
        "description": "Uploads a new profile picture for the currently logged-in user.\n\n### Arguments:\n- `file` (UploadFile): The image file to upload.\n- `session` (Session): The database session.\n- `current_user` (User): The currently logged-in user.\n\n### Returns:\n- `JSONResponse`: Confirmation message and the updated profile picture path.",
        "operationId": "upload_profile_picture",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_user-upload_profile_picture"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "patch": {
        "tags": ["user"],
        "summary": "Update Profile Picture",
        "description": "Uploads a new profile picture for the currently logged-in user.\n\n**Arguments:**\n- `session` (Session): The database session.\n- `current_user` (User): The currently logged-in user.\n- `profile_picture` (UploadFile): The image file to upload.\n\n**Returns:**\n- `User`: The updated user data.",
        "operationId": "update_profile_picture",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_user-update_profile_picture"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Body_auth-login_access_token": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": ["username", "password"],
        "title": "Body_auth-login_access_token"
      },
      "Body_user-update_profile_picture": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_user-update_profile_picture"
      },
      "Body_user-upload_profile_picture": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_user-upload_profile_picture"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "Bearer"
          }
        },
        "type": "object",
        "required": ["access_token"],
        "title": "Token"
      },
      "UserCreate": {
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 50,
            "title": "Username"
          },
          "email": {
            "type": "string",
            "maxLength": 100,
            "title": "Email"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          },
          "profile_picture": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Picture"
          },
          "password_hash": {
            "type": "string",
            "title": "Password Hash"
          }
        },
        "type": "object",
        "required": ["username", "email", "password_hash"],
        "title": "UserCreate"
      },
      "UserRead": {
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 50,
            "title": "Username"
          },
          "email": {
            "type": "string",
            "maxLength": 100,
            "title": "Email"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          },
          "profile_picture": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Picture"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": ["username", "email", "user_id", "created_at"],
        "title": "UserRead"
      },
      "UserUpdate": {
        "properties": {
          "username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Username"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          }
        },
        "type": "object",
        "title": "UserUpdate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/v1/auth/login/access-token"
          }
        }
      }
    }
  }
}
