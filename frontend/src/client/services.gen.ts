// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  RegisterUserData,
  RegisterUserResponse,
  LoginAccessTokenData,
  LoginAccessTokenResponse,
  ReadUserResponse,
  UpdateUserMeData,
  UpdateUserMeResponse,
  GetProfilePictureResponse,
  UploadProfilePictureData,
  UploadProfilePictureResponse,
  UpdateProfilePictureData,
  UpdateProfilePictureResponse,
} from './types.gen';

/**
 * Register an user
 * Register a user with all the necessary information.
 *
 * ### Args:
 * - `session (SessionDep)`: Database session dependency.
 * - `user_in (UserCreate)`: User input data required for registration.
 *
 * ### Returns:
 * - `UserRead`: The registered user information excluding sensitive data.
 *
 * ### Raises:
 * - `HTTPException`: If a user with the provided email already exists.
 *
 * ### Example:
 * ```python
 * {
 * "email": "user@example.com",
 * "full_name": "John Doe",
 * "password": "strongpassword"
 * }
 * ```
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserRead The Register user
 * @throws ApiError
 */
export const registerUser = (
  data: RegisterUserData,
): CancelablePromise<RegisterUserResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/auth/register',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      422: 'Validation Error',
    },
  });
};

/**
 * Login Access Token
 * Get an access token for authentication.
 *
 * This endpoint authenticates a user's credentials and returns an access token
 * if the credentials are valid.
 *
 * - `session`: SQLAlchemy database session dependency.
 * - `form_data`: OAuth2PasswordRequestForm object containing username and password.
 *
 * ## Returns:
 * - `Token`: A Token object containing the access token and token type.
 *
 * ## Raises:
 * - `HTTPException`: If the provided username or password is incorrect.
 * @param data The data for the request.
 * @param data.formData
 * @returns Token Successful Response
 * @throws ApiError
 */
export const loginAccessToken = (
  data: LoginAccessTokenData,
): CancelablePromise<LoginAccessTokenResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/auth/login/access-token',
    formData: data.formData,
    mediaType: 'application/x-www-form-urlencoded',
    errors: {
      422: 'Validation Error',
    },
  });
};

/**
 * Read User
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const readUser = (): CancelablePromise<ReadUserResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/users/me',
  });
};

/**
 * Update User Me
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const updateUserMe = (
  data: UpdateUserMeData,
): CancelablePromise<UpdateUserMeResponse> => {
  return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/users/me',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      422: 'Validation Error',
    },
  });
};

/**
 * Get Profile Picture
 * Serve the profile picture of a user.
 *
 * ### Arguments:
 * - `user_id` (int): The ID of the user whose profile picture is requested.
 * - `session` (Session): The database session.
 *
 * ### Returns:
 * - `FileResponse`: The requested image file.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getProfilePicture =
  (): CancelablePromise<GetProfilePictureResponse> => {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/users/profile-picture',
    });
  };

/**
 * Upload Profile Picture
 * Uploads a new profile picture for the currently logged-in user.
 *
 * ### Arguments:
 * - `file` (UploadFile): The image file to upload.
 * - `session` (Session): The database session.
 * - `current_user` (User): The currently logged-in user.
 *
 * ### Returns:
 * - `JSONResponse`: Confirmation message and the updated profile picture path.
 * @param data The data for the request.
 * @param data.formData
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const uploadProfilePicture = (
  data: UploadProfilePictureData,
): CancelablePromise<UploadProfilePictureResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/users/profile-picture',
    formData: data.formData,
    mediaType: 'multipart/form-data',
    errors: {
      422: 'Validation Error',
    },
  });
};

/**
 * Update Profile Picture
 * Uploads a new profile picture for the currently logged-in user.
 *
 * **Arguments:**
 * - `session` (Session): The database session.
 * - `current_user` (User): The currently logged-in user.
 * - `profile_picture` (UploadFile): The image file to upload.
 *
 * **Returns:**
 * - `User`: The updated user data.
 * @param data The data for the request.
 * @param data.formData
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const updateProfilePicture = (
  data: UpdateProfilePictureData,
): CancelablePromise<UpdateProfilePictureResponse> => {
  return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/users/profile-picture',
    formData: data.formData,
    mediaType: 'multipart/form-data',
    errors: {
      422: 'Validation Error',
    },
  });
};
