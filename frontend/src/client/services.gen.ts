// This file is auto-generated by @hey-api/openapi-ts

import {
  client,
  type Options,
  urlSearchParamsBodySerializer,
} from '@hey-api/client-fetch';
import type {
  RegisterUserData,
  RegisterUserError,
  RegisterUserResponse,
  LoginAccessTokenData,
  LoginAccessTokenError,
  LoginAccessTokenResponse,
  ReadUserError,
  ReadUserResponse,
  UpdateUserMeData,
  UpdateUserMeError,
  UpdateUserMeResponse,
} from './types.gen';

/**
 * Register an user
 * Register a user with all the necessary information.
 *
 * ### Args:
 * - `session (SessionDep)`: Database session dependency.
 * - `user_in (UserCreate)`: User input data required for registration.
 *
 * ### Returns:
 * - `UserPublic`: The registered user information excluding sensitive data.
 *
 * ### Raises:
 * - `HTTPException`: If a user with the provided email already exists.
 *
 * ### Example:
 * ```python
 * {
 * "email": "user@example.com",
 * "full_name": "John Doe",
 * "password": "strongpassword"
 * }
 * ```
 */
export const registerUser = (options: Options<RegisterUserData>) => {
  return (options?.client ?? client).post<
    RegisterUserResponse,
    RegisterUserError
  >({
    ...options,
    url: '/api/v1/auth/register',
  });
};

/**
 * Login Access Token
 * Get an access token for authentication.
 *
 * This endpoint authenticates a user's credentials and returns an access token
 * if the credentials are valid.
 *
 * - `session`: SQLAlchemy database session dependency.
 * - `form_data`: OAuth2PasswordRequestForm object containing username and password.
 *
 * ## Returns:
 * - `Token`: A Token object containing the access token and token type.
 *
 * ## Raises:
 * - `HTTPException`: If the provided username or password is incorrect.
 */
export const loginAccessToken = (options: Options<LoginAccessTokenData>) => {
  return (options?.client ?? client).post<
    LoginAccessTokenResponse,
    LoginAccessTokenError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    url: '/api/v1/auth/login/access-token',
  });
};

/**
 * Read User
 */
export const readUser = (options?: Options) => {
  return (options?.client ?? client).get<ReadUserResponse, ReadUserError>({
    ...options,
    url: '/api/v1/users/me',
  });
};

/**
 * Update User Me
 */
export const updateUserMe = (options: Options<UpdateUserMeData>) => {
  return (options?.client ?? client).patch<
    UpdateUserMeResponse,
    UpdateUserMeError
  >({
    ...options,
    url: '/api/v1/users/me',
  });
};
